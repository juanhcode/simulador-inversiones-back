CREATE TABLE ROL (
	ROL_ID SERIAL PRIMARY KEY NOT NULL,
	ROL_NAME VARCHAR(128) NOT NULL
);

CREATE TABLE "user" (
	USER_ID SERIAL PRIMARY KEY NOT NULL,
	FIRST_NAMES VARCHAR(128) NOT NULL,
	LAST_NAMES VARCHAR(128) NOT NULL,
	USER_NAME VARCHAR(128) NOT NULL,
	EMAIL_ADDRESS VARCHAR(128) UNIQUE NOT NULL,
	PASSWORD VARCHAR(128) NOT NULL,
	ROL_ID INTEGER NOT NULL,
	CONSTRAINT FK_ROL_ID FOREIGN KEY (ROL_ID) REFERENCES ROL(ROL_ID)
);

CREATE TYPE INVESTMENT_TYPE AS ENUM ('fija','variable');

CREATE TABLE CURRENCY (
	CURRENCY_ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(128) NOT NULL,
	VALUE INTEGER NOT NULL,
	USER_ID INTEGER,
	CONSTRAINT FK_USER_ID FOREIGN KEY (USER_ID) REFERENCES "user"(USER_ID)
);

CREATE TABLE INVESTMENT (
	INVESTMENT_ID SERIAL PRIMARY KEY NOT NULL,
	DESCRIPTION VARCHAR(128) NOT NULL,
	MULTIPLIER INTEGER DEFAULT 1,
	TYPE_OF_INVESTMENT INVESTMENT_TYPE NOT NULL,
	USER_ID INTEGER,
	CONSTRAINT FK_USER_ID FOREIGN KEY (USER_ID) REFERENCES "user"(USER_ID)
);

CREATE TABLE ITEM (
	ITEM_ID SERIAL PRIMARY KEY NOT NULL,
	DESCRIPTION VARCHAR(128) NOT NULL,
	PRICE DOUBLE PRECISION NOT NULL,
	QUANTITY INTEGER NOT NULL,
	INVESTMENT_ID INTEGER,
	CURRENCY_ID INTEGER,
	CONSTRAINT FK_CURRENCY_ID FOREIGN KEY (CURRENCY_ID) REFERENCES CURRENCY(CURRENCY_ID),
	CONSTRAINT FK_INVESTMENT_ID FOREIGN KEY (INVESTMENT_ID) REFERENCES INVESTMENT(INVESTMENT_ID)
)

--- Trigger para crear moneda cuando se registra un usuario.
CREATE OR REPLACE FUNCTION insert_userid_in_currency() RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO currency (name, value, user_id)
    VALUES ('USD', 1, NEW.user_id);
	
	INSERT INTO currency (name, value, user_id)
    VALUES ('EUR', 1, NEW.user_id);

	INSERT INTO currency (name, value, user_id)
    VALUES ('COP', 1, NEW.user_id);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tr_insert_currency
AFTER INSERT ON "user"
FOR EACH ROW EXECUTE PROCEDURE insert_userid_in_currency();

--- Trigger para bloquear la modificaci√≥n de la moneda COP.
CREATE OR REPLACE FUNCTION check_modification() RETURNS TRIGGER AS $$
BEGIN

	IF (OLD.name = 'COP') THEN
    RAISE EXCEPTION 'No se permite modificar la moneda COP.';
	RETURN NULL;
	
	ELSEIF (old.name <> new.name) THEN
	RAISE EXCEPTION 'No se permite modificar el nombre de las monedas.';
	RETURN NULL;
	
	ELSE RETURN NEW;
	END IF;

END;		
$$ LANGUAGE plpgsql;

CREATE TRIGGER block_modification
BEFORE UPDATE ON currency
FOR EACH ROW
EXECUTE PROCEDURE check_modification();
